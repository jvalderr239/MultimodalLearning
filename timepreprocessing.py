# -*- coding: utf-8 -*-
"""DataPreProcessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iKfrE4WArlkpHOJmVrVuGR8vjg4fZ5Hr
"""

import os.path
import pickle
import numpy as np
import torch
from torch.utils.data import TensorDataset, DataLoader
import cv2
import random

SEED = 239
random.seed(SEED)
np.random.seed(SEED)
torch.manual_seed(SEED)

DSIZE = 227
datapath = "./drive/MyDrive/Multimodal/Data/"

resize = lambda x: cv2.resize(x, dsize=(DSIZE, DSIZE), interpolation=cv2.INTER_LINEAR)
get_file = lambda dtype, phase: np.load(datapath + dtype + '/'+ phase + '/' + phase + '_' + dtype + '.npy',allow_pickle=True) 


class AudioVisualDataset(TensorDataset):

  def __init__(self, 
               audio_file, 
               visual_file, 
               labels_file,
               ):
    """
    Args:
      audio_file: file name for audio
      visual_file: file name for images
      labels_file: file with labels for image and audio
    """
    self.audio_file = audio_file
    self.visual_file = visual_file
    self.labels = labels_file

  def __len__(self):
    return len(self.audio_file) 

  def __getitem__(self, idx):

    if torch.is_tensor(idx):
      idx = idx.tolist()
    image = self.visual_file[idx]
    audio = self.audio_file[idx]

    label = self.labels[idx]

    return audio, image, label

def train_test_split(_data, percent: float):
    datasize = _data.shape[0]
    print(f"Splitting {datasize} sets")
    pct = int(datasize * percent)
    t_data, rem_data = _data[:pct], _data[pct:]
    return t_data, rem_data

def load_data(key)->np.ndarray:
    drivedata = {'audio':'audio/audio.npy', 
             'visual':'visual/visual.npy', 
             'labels':'labels/labels.npy'}
    
    return np.load(datapath + drivedata[key], allow_pickle=True)

def save_data(data, dtype, phase):
    print(f"Saving {dtype} file in {phase} folder.")
    np.save(datapath + dtype + '/' + phase + '/' + phase + '_'+ dtype + '.npy', data, allow_pickle=True)
    print(f"Done saving.")

def process_data(dtype):
    data = load_data(dtype)
    print(dtype)
    t_x, rem_data = train_test_split(data, percent=0.8)
    v_x, test_x = train_test_split(rem_data, percent=0.5)
    
    save_data(t_x, dtype, 'train')
    save_data(v_x, dtype, 'val')
    save_data(test_x, dtype, 'test')
    return

def load_processed_data(phase):
    print(f"Loading {phase} data...")
    audio = get_file('audio', phase)
    visual = get_file('visual', phase)
    labels = get_file('labels', phase)
    to_torch = lambda x: [torch.from_numpy(np.array(item)).float() for item in x]
    return to_torch(audio), to_torch(visual), to_torch(labels)
